import { app, ipcMain, BrowserWindow, Menu, dialog } from "electron";
import { applicationMenu } from "./application-menu";
import { IPCEvents, LoadDotDataPayload, LoadPhaseDataPayload } from "../events";
import {
  fetchCompilerPhases,
  fetchDotFromBgv,
  handleSeafoamCommandError,
} from "./seafoam";
import ElectronLog from "electron-log";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export const IS_MAC = process.platform === "darwin";

// Configure logging.
ElectronLog.transports.console.level = "debug";
ElectronLog.transports.file.level = "error";

ElectronLog.catchErrors({
  showDialog: false,
  onError(error: Error) {
    dialog.showMessageBoxSync({
      type: "error",
      title: "An unknown error occurred",
      message: error.message,
      detail: error.stack,
    });
  },
});

app.setName("Seafoam");
app.commandLine.appendSwitch("js-flags", "--max-old-space-size=8192");

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  Menu.setApplicationMenu(applicationMenu);

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on(
  IPCEvents.LoadDotData,
  async (event, payload: LoadDotDataPayload) => {
    const { filename, phase } = payload;

    try {
      const data = await fetchDotFromBgv(filename, phase);

      event.sender.send(IPCEvents.LoadedDotData, { dotData: data });
    } catch (e) {
      handleSeafoamCommandError(e, "Error loading graph DOT data");
    }
  }
);

ipcMain.on(
  IPCEvents.LoadPhaseData,
  async (event, payload: LoadPhaseDataPayload) => {
    try {
      const data = await fetchCompilerPhases(payload.filename);

      event.sender.send(IPCEvents.LoadedPhaseData, { phases: data });
    } catch (e) {
      handleSeafoamCommandError(e, "Error fetching compiler phases");
    }
  }
);
